version: '3.8'

networks:
  pdf-converter-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET}

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  rabbitmq-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  nginx-ssl:
    driver: local

services:
  # ================================
  # DATABASE LAYER
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: pdf-converter-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d:ro
      - ./infrastructure/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups/postgres:/backups
    networks:
      - pdf-converter-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # CACHE LAYER
  # ================================
  redis:
    image: redis:7-alpine
    container_name: pdf-converter-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAXMEMORY} --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
      - ./infrastructure/queue/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - pdf-converter-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ================================
  # MESSAGE QUEUE
  # ================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: pdf-converter-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - ./infrastructure/queue/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./infrastructure/queue/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - pdf-converter-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # ================================
  # OBJECT STORAGE (S3 Compatible)
  # ================================
  minio:
    image: minio/minio:latest
    container_name: pdf-converter-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - minio-data:/data
      - ./backups/minio:/backups
    networks:
      - pdf-converter-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ================================
  # API GATEWAY SERVICE
  # ================================
  api-gateway:
    build: 
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: pdf-converter-api-gateway
    restart: unless-stopped
    ports:
      - "${API_GATEWAY_PORT}:3000"
    environment:
      NODE_ENV: ${ENVIRONMENT}
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pdf-converter-network
    volumes:
      - ./logs/api-gateway:/app/logs
      - ./temp-uploads:/app/temp-uploads

  # ================================
  # AUTHENTICATION SERVICE
  # ================================
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: pdf-converter-auth-service
    restart: unless-stopped
    ports:
      - "${AUTH_SERVICE_PORT}:3000"
    environment:
      NODE_ENV: ${ENVIRONMENT}
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pdf-converter-network
    volumes:
      - ./logs/auth-service:/app/logs

  # ================================
  # FILE SERVICE
  # ================================
  file-service:
    build:
      context: ./backend/file-service
      dockerfile: Dockerfile
    container_name: pdf-converter-file-service
    restart: unless-stopped
    ports:
      - "${FILE_SERVICE_PORT}:3000"
    environment:
      NODE_ENV: ${ENVIRONMENT}
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET_NAME}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pdf-converter-network
    volumes:
      - ./logs/file-service:/app/logs
      - ./temp-uploads:/app/temp-uploads

  # ================================
  # CONVERSION ENGINE (C++)
  # ================================
  conversion-engine:
    build:
      context: ./backend/conversion-engine
      dockerfile: Dockerfile
    container_name: pdf-converter-conversion-engine
    restart: unless-stopped
    ports:
      - "${CONVERSION_ENGINE_PORT}:3000"
    environment:
      NODE_ENV: ${ENVIRONMENT}
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET_NAME}
      CONVERSION_TIMEOUT: ${CONVERSION_TIMEOUT}
      CLEANUP_INTERVAL: ${CLEANUP_INTERVAL}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pdf-converter-network
    volumes:
      - ./logs/conversion-engine:/app/logs
      - ./temp-uploads:/app/temp-uploads

  # ================================
  # NOTIFICATION SERVICE
  # ================================
  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: pdf-converter-notification-service
    restart: unless-stopped
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:3000"
    environment:
      NODE_ENV: ${ENVIRONMENT}
      PORT: 3000
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASS: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - pdf-converter-network
    volumes:
      - ./logs/notification-service:/app/logs

  # ================================
  # REVERSE PROXY & LOAD BALANCER
  # ================================
  nginx:
    image: nginx:alpine
    container_name: pdf-converter-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - nginx-ssl:/etc/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-gateway
      - auth-service
      - file-service
      - conversion-engine
      - notification-service
    networks:
      - pdf-converter-network
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx

  # ================================
  # MONITORING - PROMETHEUS
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pdf-converter-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pdf-converter-network

  # ================================
  # MONITORING - GRAFANA
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: pdf-converter-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./infrastructure/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - pdf-converter-network
    depends_on:
      - prometheus
